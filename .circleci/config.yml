version: 2.1

executors:
  my-executor:
    docker:
      - image: cimg/node:current
    working_directory: ~/project

jobs:
  test-go:
    docker:
      - image: cimg/go:1.23
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Run tests
          command: gotestsum --junitfile junit.xml
      - store_test_results:
          path: junit.xml

  build-go-executables:
    docker:
      - image: cimg/go:1.23
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      - run:
          name: Build executables
          command: go build -o ~/artifacts ./...
      - store_artifacts:
          path: ~/artifacts
          destination: executables

  lint-go:
    docker:
      - image: cimg/go:1.23
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install golangci-lint
          command: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
      - run:
          name: Run golangci-lint
          command: golangci-lint run

  deploy:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    steps:
      - run:
          name: deploy
          command: '#e.g. ./deploy.sh'

  setup:
    executor: my-executor
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Create package.json
          command: |
            echo '{
              "name": "temp-project",
              "version": "1.0.0",
              "description": "",
              "main": "index.js",
              "scripts": {
                "test": "echo \"Error: no test specified\" && exit 1"
              },
              "keywords": [],
              "author": "",
              "license": "ISC",
              "devDependencies": {
                "@commitlint/cli": "^19.6.1",
                "@commitlint/config-conventional": "^19.6.0"
              }
            }' > package.json
      - restore_cache:
          key: lock-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: lock-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules

  lint_commit_message:
    executor: my-executor
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - run:
          name: Define environment variable with latest commit's message
          command: |
            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Lint commit message
          command: echo "$COMMIT_MESSAGE" | npx commitlint

workflows:
  build-and-test:
    jobs:
      - test-go
      - build-go-executables:
          requires:
            - test-go
      # - deploy:
      #     requires:
      #       - build-go-executables

  commit:
    jobs:
      - setup
      - lint_commit_message:
          requires:
            - setup